# This is a basic cicd workflow to deploy a website static app to s3 bucket

name: CICD Pipeline for my App

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "devel" branch
  push:
    branches:
      - devel
      - stage
      - prod

  pull_request:
    types: [
        opened,
        reopened,
        edited
    ]
    branches:
        - devel
        - stage
        - prod

permissions:
  issues: write
  pull-requests: write

jobs:
  config:
    runs-on: ubuntu-latest

    outputs:
        deployment_env: ${{ env.DEPLOYMENT_ENV || 'development' }}

    steps:
        - name: Set Development environment
          if: ${{ github.ref == 'refs/heads/devel' }}
          run: |
           echo "DEVELOPMENT_ENV=development" >> $GITHUB_ENV

        - name: Set Staging environment
          if: ${{ github.ref == 'refs/heads/stage' }}
          run: |
            echo "STAGING_ENV=staging" >> $GITHUB_ENV

        - name: Set Production environment
          if: ${{ github.ref == 'refs/heads/prod' }}
          run: |
             echo "PRODUCTION_ENV=production" >> $GITHUB_ENV
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: 
        - config

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js env
        uses: actions/setup-node@v4
        with:
            node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Linter (ESLint)
        run: npm run lint

      - name: Formatter (Prettier)
        run: npm run prettier

      - name: Test (Jest)
        run: CI=true npm run test

      - name: Build
        run: npm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
            name: build-${{ needs.config.outputs.deployment_env }}
            path: ./Build

      - name: Comment on PR for Sucess
        if: |
         success() && 
         github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
            script: |
              const message = "All checks passed! Your changes are ready to be merged.";
              const prNumber = context.payload.pull_request.number;
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: message
              });
            
      - name: Comment on PR for Failure
        if: |
         failure() && 
         github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const message = "One or more checks failed. Please review the logs for details.";
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: message
            });

  infra-deployment:
    name: 'Infrastructure deployment'
    if: |
     github.event_name == 'push' &&
     (github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod')
    runs-on: ubuntu-latest
    needs: 
        - config
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - uses: hashicorp/setup-terraform@v3
        
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd terraform
        terraform init --backend-config="env/${{ needs.config.outputs.deployment_env }}-backend.json"
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var "environment=${{ needs.config.outputs.deployment_env }}"
      
  apply:
      name: "Apply Infra Changes"
      runs-on: ubuntu-latest
      environment: ${{ github.ref == 'refs/heads/devel' && 'development' || github.ref == 'refs/heads/stage' && 'staging' || github.ref == 'refs/heads/prod' && 'production' }}
      needs: 
          - infra-deployment
      steps:
     # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: |
          cd terraform 
          terraform apply -auto-approve -var "environment=${{ needs.config.outputs.deployment_env }}"

  app-deployment:
    name: "Application deployment"
    if: |
     github.event_name == 'push' &&
     (github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod')
    runs-on: ubuntu-latest
    needs: 
        - config
        - build
    steps:
        - name: Checkout code
          uses: actions/checkout@4

        # Configure AWS credentials
        - name: Configure AWS Credentials
          id: aws-deployment-creds
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            name: build-${{ needs.config.outputs.deployment_env }}
            path: ./build

        - name: Deploy the app to s3 bucket
          run: |
            BUCKET_NAME="static-website-${{ needs.config.outputs.deployment_env }}-${{ steps.aws-deployment-creds.outputs.aws-account-id }}"
            aws s3 sync ./build s3://$BUCKET_NAME --delete
            