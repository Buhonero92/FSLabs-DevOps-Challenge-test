name: 'Infrastructure workflow deployment'

on:
  push:
    branches:
        - devel
        - stage
        - prod
  pull_request:
    types: [
        opened,
        reopened,
        edited
    ]
jobs:
    config:
        runs-on: ubuntu-latest
    
        outputs:
            deployment_env: ${{ env.DEPLOYMENT_ENV || 'development' }}
    
        steps:
            - name: Set Development environment
              if: ${{ github.ref == 'refs/heads/devel' }}
              run: |
               echo "DEVELOPMENT_ENV=development" >> $GITHUB_ENV
    
            - name: Set Staging environment
              if: ${{ github.ref == 'refs/heads/stage' }}
              run: |
                echo "STAGING_ENV=staging" >> $GITHUB_ENV
    
            - name: Set Production environment
              if: ${{ github.ref == 'refs/heads/prod' }}
              run: |
                 echo "PRODUCTION_ENV=production" >> $GITHUB_ENV

    infra-deployment:
        name: 'Infrastructure deployment'
        runs-on: ubuntu-latest
        needs: 
            - config
        # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
        defaults:
         run:
            shell: bash
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4

        # Configure AWS credentials
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: |
           cd terraform
           terraform init --backend-config="env/${{ needs.config.outputs.deployment_env }}-backend.json"

        # Generates an execution plan for Terraform
        - name: Terraform Plan
          run: |
           cd terraform
           terraform plan -var "environment=${{ needs.config.outputs.deployment_env }}"

    apply:
        name: "Apply Infra Changes"
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/devel' || github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/prod')
        runs-on: ubuntu-latest
        environment: ${{ github.ref == 'refs/heads/devel' && 'development' || github.ref == 'refs/heads/stage' && 'staging' || github.ref == 'refs/heads/prod' && 'production' }}
        needs: 
            - infra-deployment
        steps:

        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
        - name: Terraform Apply
          run: |
           cd terraform 
           terraform apply -auto-approve -var "environment=${{ needs.config.outputs.deployment_env }}"